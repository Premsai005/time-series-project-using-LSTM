# -*- coding: utf-8 -*-
"""time series forcast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1twErivpqbNo25_xRxfJs28IwK1SBckRK
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense,LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
np.random.seed(7)

dataframe=pd.read_csv('airline_passengers.csv',usecols=[1])
dataset=dataframe.values
dataset=dataset.astype('float32')
scaler=MinMaxScaler(feature_range=(0,1))
dataset=scaler.fit_transform(dataset)

train_size=int(len(dataset)*0.67)
test_size=len(dataset)-train_size
train,test=dataset[0:train_size,:],dataset[train_size:len(dataset),:]
print(len(train),len(test))

def create_dataset(dataset,look_back=1):
  dataX,dataY=[],[]
  for i in range(len(dataset)-look_back-1):
    a=dataset[i:(i+look_back),0]
    dataX.append(a)
    dataY.append(dataset[i+look_back,0])
  return np.array(dataX),np.array(dataY)

look_back=1
trainX,trainY=create_dataset(train,look_back)
testX,testY=create_dataset(test,look_back)
trainX=np.reshape(trainX,(trainX.shape[0],1,trainX.shape[1]))
testX=np.reshape(testX,(testX.shape[0],1,testX.shape[1]))

model=Sequential()
model.add(LSTM(4,input_shape=(1,look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')
model.fit(trainX,trainY,epochs=100,batch_size=1,verbose=2)

trainPredict=model.predict(trainX)
testPredict=model.predict(testX)

trainPredict=scaler.inverse_transform(trainPredict)
trainY=scaler.inverse_transform(np.array(trainY).reshape(-1,1))
testPredict=scaler.inverse_transform(testPredict)
testY=scaler.inverse_transform(np.array(testY).reshape(-1,1))

trainScore=np.sqrt(mean_squared_error(trainY[:,0],trainPredict[:,0]))
testScore=np.sqrt(mean_squared_error(testY[:,0],testPredict[:,0]))

trainPredictplot=np.empty_like(dataset)
trainPredictplot[:,:]=np.nan
trainPredictplot[look_back:len(trainPredict)+look_back,:]=trainPredict
testPredictplot=np.empty_like(dataset)
testPredictplot[:,:]=np.nan
testPredictplot[len(trainPredict)+(look_back*2)+1:len(dataset)-1]=testPredict
plt.plot(scaler.inverse_transform(dataset))
plt.plot(trainPredictplot)
plt.plot(testPredictplot)
plt.show()